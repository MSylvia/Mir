; --------------------------------------------
; Title:   Test1.Main
; Author:  Bobbias
; Date:    4/29/2012
; Version: 0.01
; --------------------------------------------
; Description:
; This program is a hand written hello-world
; program targeted at the DCPU version 1.7.
; --------------------------------------------
; Before you can write anything to the screen, you have to ensure the screen is
; connected. This checks to see if the screen is connected, and also detects
; other hardware (Namely the clock and the keyboard.)
; --------------------------------------------

        hwn i                                   ; Get the list of attached hardware
        set j, 0                                ; Count
:loop
        hwq j                                   ; Step 1: Get info
        ife a, 0xf615                           ; If monitor...
                set pc, display_detected
        ife a, 0x7406                           ; keyboard...
                set pc, keyboard_detected
        ife a, 0xb402                           ; clock...
                set pc, clock_detected
:continue
        add j, 1                                ; Count++
        ife j, i                                ; When finished iterating
                set pc, initialize_display      ; Start setting up the display routine
        set pc, loop


:display_detected
        set [display_address], j                ; set the address
        set pc, continue                        ; then continue finding stuff
:keyboard_detected
        set [keyboard_address], j               ; set the address
        set pc, continue                        ; then continue finding stuff
:clock_detected
        set [clock_address], j          ; set the address
        set pc, continue                        ; then continue finding stuff

:initialize_display                             ; Detection routine finished, loop or do more stuff here
        set i, hello_world                      ; letter counter
        set j, 0x8000                           ; start of video memory
:next_char
        set a, [i]                              ; a = letter
        ife a, 0x0000                           ; if next character is 0x0000
                set pc, draw_karet                      ; you're done, draw shit
        bor a, 0x7000                           ; else, set foreground color for letter
        set [j], a                              ; toss it to the memory location
        add i, 1                                ; move to next char
        add j, 1                                ; move to next video memo location
        set pc, next_char                       ; go to next char
:draw_karet
        set [j],0x709f
:draw_final
        set a, 0                                ; MEM_MAP_SCREEN mode
        set b, 0x8000                           ; address of memory to be used
        hwi [display_address]                   ; send interrupt
:init_keyboard
        set a, 0
        hwi [keyboard_address]
        set pc, inf_loop
:erase_key
        ; get the location of the character
        set b, [char_pos]

        ; turn off the caret
        set [b], 0

        ; decrement the character position
        set a, [char_pos]
        sub a, 1
        set [char_pos], a

        ; turn on the caret
        set [a], 0x709f

        set pc, inf_loop
:ignore_key
        set pc, inf_loop
:map_key
        ife c, 0x10
                set pc, erase_key
        ife c, 0x90
                set pc, ignore_key

        ; get the location of the character
        set b, [char_pos]

        ; turn off the caret
        xor [b], 0x80

        ; make the new character
        set a, c
        bor a, 0x7000

        ; set the character in place
        set [b], a

        ; increment the character position
        set a, [char_pos]
        add a, 1
        set [char_pos], a

        ; turn on the caret
        set [a], 0x709f
:inf_loop
        set a, 1
        hwi [keyboard_address]
        ifn c, 0x0000
                set pc, map_key

        set pc, inf_loop

; Data
:display_address
DAT 0xFFFF
:keyboard_address
DAT 0xFFFF
:clock_address
DAT 0xFFFF
:hello_world
DAT "Hello World!", 0x0000
:char_pos
DAT 0x800C